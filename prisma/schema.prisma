// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id     String @id @default(cuid())
  email  String @unique
  number String

  firstName String
  lastName  String
  password  String
  isAdmin   Boolean? @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reviews Review[]
  order   Order[]
  cart    Cart?

  @@map("user")
}

model Review {
  id        String   @id @default(cuid())
  star      Int
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])

  @@map("review")
}

model Product {
  id          String   @id @default(cuid())
  price       Float
  discount    Float?
  name        String
  quantity    Int?     @default(0)
  brand       String
  image       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  review     Review[]
  orderItems OrderItem[]
  cartItems  CartItem[]

  @@map("product")
}

model Order {
  id         String      @id @default(cuid())
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  totalPrice Float
  shipping   String
  status     String
  products   OrderItem[]
  user       User        @relation(fields: [userId], references: [id])
  userId     String

  address String

  @@map("order")
}

model OrderItem {
  id        String  @id @default(cuid())
  quantity  Int
  product   Product @relation(fields: [productId], references: [id])
  productId String
  order     Order?  @relation(fields: [orderId], references: [id])
  orderId   String

  @@map("order_item")
}

model Cart {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  items     CartItem[]

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  @@map("cart")
}

model CartItem {
  id        String  @id @default(cuid())
  quantity  Int
  product   Product @relation(fields: [productId], references: [id])
  productId String
  cart      Cart    @relation(fields: [cartId], references: [id])
  cartId    String

  @@map("cart_item")
}
